{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"0index/","text":"Selamat Datang di Webstatis Saya \u00b6 Nama: Mochamad Salim Ubaidillah \u00b6 NIM: 170411100097 \u00b6 Program Studi S1 Teknik Informatika Fakultas Teknik Universitas Trunojoyo Madura - Web ini dibuat untuk \u00b6 Membagikan ilmu yang saya terima selama menempuh mata kuliah Komputasi Numerik Komputasi Numerik . Memenuhi tugas perkuliahan komputasi numerik yang diampu oleh Bapak Mula'ab, S.Si., M.Kom. Bapak Mula'ab, S.Si., M.Kom.","title":"0-Tentang Penulis"},{"location":"0index/#selamat-datang-di-webstatis-saya","text":"","title":"Selamat Datang di Webstatis Saya"},{"location":"0index/#nama-mochamad-salim-ubaidillah","text":"","title":"Nama: Mochamad Salim Ubaidillah"},{"location":"0index/#nim-170411100097","text":"Program Studi S1 Teknik Informatika Fakultas Teknik Universitas Trunojoyo Madura -","title":"NIM: 170411100097"},{"location":"0index/#web-ini-dibuat-untuk","text":"Membagikan ilmu yang saya terima selama menempuh mata kuliah Komputasi Numerik Komputasi Numerik . Memenuhi tugas perkuliahan komputasi numerik yang diampu oleh Bapak Mula'ab, S.Si., M.Kom. Bapak Mula'ab, S.Si., M.Kom.","title":"Web ini dibuat untuk"},{"location":"1deret/","text":"Deret Mclaurin \u00b6 Pengertian \u00b6 Deret Mclaurin yaitu sebuah fungsi yang memiliki turunan yang kontintu pada intervalnya, yang terekspansi dalam deret taylor. Pada dasarnya deret maclaurin masih berhubungan dengan deret taylor, namun memiliki fungsi yang diekspansi sekitar c = 0 . Deret Maclaurin biasanya disebut juga deret taylor baku. Atau bisa didefinisikan sebagai berikut: f(x)=\\sum_{n=0}^{\\infty} \\frac{f^{(n)}(0)}{n !} x^{n} f(x)=\\sum_{n=0}^{\\infty} \\frac{f^{(n)}(0)}{n !} x^{n} Contoh \u00b6 Misal pada perhitungan bilangan irasional e e = 2,718... . Bilangan tersebut bisa juga dinamakan basis natural. Soal \u00b6 tentukan e^{2 x} e^{2 x} dengan x x = 4 dan ekspansi eror < 0,001. . Penyelesaian \u00b6 Langkah 1 \u00b6 Buat tabel perhitungan untuk turunan, agar mudah dalam perhitungan \\begin{array}{|c|c|l|} \\hline f(x) & e^{2 x} & f(0)=1 \\\\ \\hline f^{(1)}(x) & 2 e^{2 x} & f^{(1)}(0)=2 \\\\ \\hline f^{(2)}(x) & 4 e^{2 x} & f^{(2)}(0)=4 \\\\ \\hline f^{(3)}(x) & 8 e^{2 x} & f^{(3)}(0)=8 \\\\ \\hline f^{(4)}(x) & 16 e^{2 x} & f^{(4)}(0)=16 \\\\ \\hline \\hline ... & ... & ... \\\\ \\hline ... & ... & ... \\\\ \\hline f^{(n)}(x) & 2^{n} e^{2 x} & f^{(n)}(0)=2^{n} \\\\ \\hline \\end{array} \\begin{array}{|c|c|l|} \\hline f(x) & e^{2 x} & f(0)=1 \\\\ \\hline f^{(1)}(x) & 2 e^{2 x} & f^{(1)}(0)=2 \\\\ \\hline f^{(2)}(x) & 4 e^{2 x} & f^{(2)}(0)=4 \\\\ \\hline f^{(3)}(x) & 8 e^{2 x} & f^{(3)}(0)=8 \\\\ \\hline f^{(4)}(x) & 16 e^{2 x} & f^{(4)}(0)=16 \\\\ \\hline \\hline ... & ... & ... \\\\ \\hline ... & ... & ... \\\\ \\hline f^{(n)}(x) & 2^{n} e^{2 x} & f^{(n)}(0)=2^{n} \\\\ \\hline \\end{array} Langkah 2 \u00b6 Setelah membuat tabel perhitungan turunan, tinggal masukan ke formula yang telah dijabarkan dengan mengganti nilai x x . Penjabaran Formula f(x)=f(0)+\\frac{f^{(1)}(0)}{1 !} x+\\frac{f^{(2)}(0)}{2 !} x^{2}+\\frac{f^{(3)}(0)}{3 !} x^{3}+\\frac{f^{(4)}(0)}{4 !} x^{4} + ... +\\frac{f^{(n)}(0)}{n !} x^{n} f(x)=f(0)+\\frac{f^{(1)}(0)}{1 !} x+\\frac{f^{(2)}(0)}{2 !} x^{2}+\\frac{f^{(3)}(0)}{3 !} x^{3}+\\frac{f^{(4)}(0)}{4 !} x^{4} + ... +\\frac{f^{(n)}(0)}{n !} x^{n} Ganti fungsi turunan sehingga didapatkan seperti dibawah f(x)=1+\\frac{2}{1 !} x+\\frac{4}{2 !} x^{2}+\\frac{8}{3 !} x^{3}+\\frac{16}{4 !} x^{4} + ... + \\frac{2^n}{n!} x^{n} f(x)=1+\\frac{2}{1 !} x+\\frac{4}{2 !} x^{2}+\\frac{8}{3 !} x^{3}+\\frac{16}{4 !} x^{4} + ... + \\frac{2^n}{n!} x^{n} Langkah 3 \u00b6 Masukkan nilai x x ke dalam formula, sehingga didapatkan hasilnya. f(x)=1+\\frac{2}{1 !} 4+\\frac{4}{2 !} 4^{2}+\\frac{8}{3 !} 4^{3}+\\frac{16}{4 !} 4^{4} + ... + \\frac{2^n}{n!} 4^{n} f(x)=1+\\frac{2}{1 !} 4+\\frac{4}{2 !} 4^{2}+\\frac{8}{3 !} 4^{3}+\\frac{16}{4 !} 4^{4} + ... + \\frac{2^n}{n!} 4^{n} Langkah 4 \u00b6 Ulangi proses sampai menemukan hasil eror < 0,001. Atau bisa menggunakan program dari python. Program Python \u00b6 import math x = 4 check = 1 a = 0 b = 1 while check > 0.001 : f_x = 0 f_y = 0 for i in range ( a ): f_x += ( 2 ** i ) * x ** i / math . factorial ( i ) for j in range ( b ): f_y += ( 2 ** j ) * x ** j / math . factorial ( j ) check = f_y - f_x a += 1 b += 1 print ( ' \\n iterasi ke-' , a , 'eror =' , check ) print ( 'hasil perhitungannya' , f_y ) . maka akan mendapatkan hasil seperti dibawah ini: iterasi ke - 1 eror = 1.0 hasil perhitungannya 1.0 iterasi ke - 2 eror = 8.0 hasil perhitungannya 9.0 iterasi ke - 3 eror = 32.0 hasil perhitungannya 41.0 iterasi ke - 4 eror = 85.33333333333333 hasil perhitungannya 126.33333333333333 iterasi ke - 5 eror = 170.66666666666669 hasil perhitungannya 297.0 iterasi ke - 6 eror = 273.0666666666666 hasil perhitungannya 570.0666666666666 iterasi ke - 7 eror = 364.08888888888896 hasil perhitungannya 934.1555555555556 iterasi ke - 8 eror = 416.1015873015872 hasil perhitungannya 1350.2571428571428 iterasi ke - 9 eror = 416.1015873015872 hasil perhitungannya 1766.35873015873 iterasi ke - 10 eror = 369.8680776014112 hasil perhitungannya 2136.226807760141 iterasi ke - 11 eror = 295.89446208112895 hasil perhitungannya 2432.12126984127 iterasi ke - 12 eror = 215.195972422639 hasil perhitungannya 2647.317242263909 iterasi ke - 13 eror = 143.46398161509296 hasil perhitungannya 2790.781223879002 iterasi ke - 14 eror = 88.28552714774924 hasil perhitungannya 2879.0667510267513 iterasi ke - 15 eror = 50.448872655856576 hasil perhitungannya 2929.515623682608 iterasi ke - 16 eror = 26.90606541645684 hasil perhitungannya 2956.4216890990647 iterasi ke - 17 eror = 13.45303270822842 hasil perhitungannya 2969.874721807293 iterasi ke - 18 eror = 6.330838921519444 hasil perhitungannya 2976.2055607288125 iterasi ke - 19 eror = 2.8137061873417224 hasil perhitungannya 2979.0192669161543 iterasi ke - 20 eror = 1.184718394670199 hasil perhitungannya 2980.2039853108245 iterasi ke - 21 eror = 0.47388735786807956 hasil perhitungannya 2980.6778726686925 iterasi ke - 22 eror = 0.18052851728316455 hasil perhitungannya 2980.8584011859757 iterasi ke - 23 eror = 0.06564673355751438 hasil perhitungannya 2980.924047919533 iterasi ke - 24 eror = 0.022833646454728296 hasil perhitungannya 2980.946881565988 iterasi ke - 25 eror = 0.0076112154847578495 hasil perhitungannya 2980.9544927814727 iterasi ke - 26 eror = 0.0024355889549951826 hasil perhitungannya 2980.9569283704277 iterasi ke - 27 eror = 0.0007494119863622473 hasil perhitungannya 2980.957677782414 . looping berhenti pada iterasi ke-27 karena eror < 0,001. Jadi dapat disimpulkan bahwa e^{2 x} e^{2 x} dengan x x = 4 dan ekspansi eror < 0,001 berhenti pada iterasi ke-27 dengan nilai eror 0,0007494119863622473. Sehingga e^8 e^8 = 2.980,9579870417282747\u202c dan e^{27} e^{27} = 2.980,957677782414 maka hasil komputasi mendapatkan nilai eror = 0,0007494119863622473","title":"1-Deret Mclaurin"},{"location":"1deret/#deret-mclaurin","text":"","title":"Deret Mclaurin"},{"location":"1deret/#pengertian","text":"Deret Mclaurin yaitu sebuah fungsi yang memiliki turunan yang kontintu pada intervalnya, yang terekspansi dalam deret taylor. Pada dasarnya deret maclaurin masih berhubungan dengan deret taylor, namun memiliki fungsi yang diekspansi sekitar c = 0 . Deret Maclaurin biasanya disebut juga deret taylor baku. Atau bisa didefinisikan sebagai berikut: f(x)=\\sum_{n=0}^{\\infty} \\frac{f^{(n)}(0)}{n !} x^{n} f(x)=\\sum_{n=0}^{\\infty} \\frac{f^{(n)}(0)}{n !} x^{n}","title":"Pengertian"},{"location":"1deret/#contoh","text":"Misal pada perhitungan bilangan irasional e e = 2,718... . Bilangan tersebut bisa juga dinamakan basis natural.","title":"Contoh"},{"location":"1deret/#soal","text":"tentukan e^{2 x} e^{2 x} dengan x x = 4 dan ekspansi eror < 0,001. .","title":"Soal"},{"location":"1deret/#penyelesaian","text":"","title":"Penyelesaian"},{"location":"1deret/#langkah-1","text":"Buat tabel perhitungan untuk turunan, agar mudah dalam perhitungan \\begin{array}{|c|c|l|} \\hline f(x) & e^{2 x} & f(0)=1 \\\\ \\hline f^{(1)}(x) & 2 e^{2 x} & f^{(1)}(0)=2 \\\\ \\hline f^{(2)}(x) & 4 e^{2 x} & f^{(2)}(0)=4 \\\\ \\hline f^{(3)}(x) & 8 e^{2 x} & f^{(3)}(0)=8 \\\\ \\hline f^{(4)}(x) & 16 e^{2 x} & f^{(4)}(0)=16 \\\\ \\hline \\hline ... & ... & ... \\\\ \\hline ... & ... & ... \\\\ \\hline f^{(n)}(x) & 2^{n} e^{2 x} & f^{(n)}(0)=2^{n} \\\\ \\hline \\end{array} \\begin{array}{|c|c|l|} \\hline f(x) & e^{2 x} & f(0)=1 \\\\ \\hline f^{(1)}(x) & 2 e^{2 x} & f^{(1)}(0)=2 \\\\ \\hline f^{(2)}(x) & 4 e^{2 x} & f^{(2)}(0)=4 \\\\ \\hline f^{(3)}(x) & 8 e^{2 x} & f^{(3)}(0)=8 \\\\ \\hline f^{(4)}(x) & 16 e^{2 x} & f^{(4)}(0)=16 \\\\ \\hline \\hline ... & ... & ... \\\\ \\hline ... & ... & ... \\\\ \\hline f^{(n)}(x) & 2^{n} e^{2 x} & f^{(n)}(0)=2^{n} \\\\ \\hline \\end{array}","title":"Langkah 1"},{"location":"1deret/#langkah-2","text":"Setelah membuat tabel perhitungan turunan, tinggal masukan ke formula yang telah dijabarkan dengan mengganti nilai x x . Penjabaran Formula f(x)=f(0)+\\frac{f^{(1)}(0)}{1 !} x+\\frac{f^{(2)}(0)}{2 !} x^{2}+\\frac{f^{(3)}(0)}{3 !} x^{3}+\\frac{f^{(4)}(0)}{4 !} x^{4} + ... +\\frac{f^{(n)}(0)}{n !} x^{n} f(x)=f(0)+\\frac{f^{(1)}(0)}{1 !} x+\\frac{f^{(2)}(0)}{2 !} x^{2}+\\frac{f^{(3)}(0)}{3 !} x^{3}+\\frac{f^{(4)}(0)}{4 !} x^{4} + ... +\\frac{f^{(n)}(0)}{n !} x^{n} Ganti fungsi turunan sehingga didapatkan seperti dibawah f(x)=1+\\frac{2}{1 !} x+\\frac{4}{2 !} x^{2}+\\frac{8}{3 !} x^{3}+\\frac{16}{4 !} x^{4} + ... + \\frac{2^n}{n!} x^{n} f(x)=1+\\frac{2}{1 !} x+\\frac{4}{2 !} x^{2}+\\frac{8}{3 !} x^{3}+\\frac{16}{4 !} x^{4} + ... + \\frac{2^n}{n!} x^{n}","title":"Langkah 2"},{"location":"1deret/#langkah-3","text":"Masukkan nilai x x ke dalam formula, sehingga didapatkan hasilnya. f(x)=1+\\frac{2}{1 !} 4+\\frac{4}{2 !} 4^{2}+\\frac{8}{3 !} 4^{3}+\\frac{16}{4 !} 4^{4} + ... + \\frac{2^n}{n!} 4^{n} f(x)=1+\\frac{2}{1 !} 4+\\frac{4}{2 !} 4^{2}+\\frac{8}{3 !} 4^{3}+\\frac{16}{4 !} 4^{4} + ... + \\frac{2^n}{n!} 4^{n}","title":"Langkah 3"},{"location":"1deret/#langkah-4","text":"Ulangi proses sampai menemukan hasil eror < 0,001. Atau bisa menggunakan program dari python.","title":"Langkah 4"},{"location":"1deret/#program-python","text":"import math x = 4 check = 1 a = 0 b = 1 while check > 0.001 : f_x = 0 f_y = 0 for i in range ( a ): f_x += ( 2 ** i ) * x ** i / math . factorial ( i ) for j in range ( b ): f_y += ( 2 ** j ) * x ** j / math . factorial ( j ) check = f_y - f_x a += 1 b += 1 print ( ' \\n iterasi ke-' , a , 'eror =' , check ) print ( 'hasil perhitungannya' , f_y ) . maka akan mendapatkan hasil seperti dibawah ini: iterasi ke - 1 eror = 1.0 hasil perhitungannya 1.0 iterasi ke - 2 eror = 8.0 hasil perhitungannya 9.0 iterasi ke - 3 eror = 32.0 hasil perhitungannya 41.0 iterasi ke - 4 eror = 85.33333333333333 hasil perhitungannya 126.33333333333333 iterasi ke - 5 eror = 170.66666666666669 hasil perhitungannya 297.0 iterasi ke - 6 eror = 273.0666666666666 hasil perhitungannya 570.0666666666666 iterasi ke - 7 eror = 364.08888888888896 hasil perhitungannya 934.1555555555556 iterasi ke - 8 eror = 416.1015873015872 hasil perhitungannya 1350.2571428571428 iterasi ke - 9 eror = 416.1015873015872 hasil perhitungannya 1766.35873015873 iterasi ke - 10 eror = 369.8680776014112 hasil perhitungannya 2136.226807760141 iterasi ke - 11 eror = 295.89446208112895 hasil perhitungannya 2432.12126984127 iterasi ke - 12 eror = 215.195972422639 hasil perhitungannya 2647.317242263909 iterasi ke - 13 eror = 143.46398161509296 hasil perhitungannya 2790.781223879002 iterasi ke - 14 eror = 88.28552714774924 hasil perhitungannya 2879.0667510267513 iterasi ke - 15 eror = 50.448872655856576 hasil perhitungannya 2929.515623682608 iterasi ke - 16 eror = 26.90606541645684 hasil perhitungannya 2956.4216890990647 iterasi ke - 17 eror = 13.45303270822842 hasil perhitungannya 2969.874721807293 iterasi ke - 18 eror = 6.330838921519444 hasil perhitungannya 2976.2055607288125 iterasi ke - 19 eror = 2.8137061873417224 hasil perhitungannya 2979.0192669161543 iterasi ke - 20 eror = 1.184718394670199 hasil perhitungannya 2980.2039853108245 iterasi ke - 21 eror = 0.47388735786807956 hasil perhitungannya 2980.6778726686925 iterasi ke - 22 eror = 0.18052851728316455 hasil perhitungannya 2980.8584011859757 iterasi ke - 23 eror = 0.06564673355751438 hasil perhitungannya 2980.924047919533 iterasi ke - 24 eror = 0.022833646454728296 hasil perhitungannya 2980.946881565988 iterasi ke - 25 eror = 0.0076112154847578495 hasil perhitungannya 2980.9544927814727 iterasi ke - 26 eror = 0.0024355889549951826 hasil perhitungannya 2980.9569283704277 iterasi ke - 27 eror = 0.0007494119863622473 hasil perhitungannya 2980.957677782414 . looping berhenti pada iterasi ke-27 karena eror < 0,001. Jadi dapat disimpulkan bahwa e^{2 x} e^{2 x} dengan x x = 4 dan ekspansi eror < 0,001 berhenti pada iterasi ke-27 dengan nilai eror 0,0007494119863622473. Sehingga e^8 e^8 = 2.980,9579870417282747\u202c dan e^{27} e^{27} = 2.980,957677782414 maka hasil komputasi mendapatkan nilai eror = 0,0007494119863622473","title":"Program Python"},{"location":"2metode/","text":"Program Newton Raphson pada Fungsi Persamaan Non Linear \u00b6 Newton-Raphson \u00b6 Pengertian \u00b6 Newton-Raphson atau biasanya didefinisikan sebagai sebuah metode pencarian akar pada fungsi f(x) f(x) melalui pendekatan satu titik dengan fungsi f(x) f(x) yang memiliki turunan. Metode ini memakai pendekatan satu titik untuk titik awalnya. Oleh karena itu dianggap lebih mudah dari Bisection Method (Metode Bagi Dua). Convergen ke akar bisa semakin cepat dilakukan apabila titik awal yang dipilih dengan akar yang sebenarnya semakin dekat. Prosedur \u00b6 Untuk menentukan prosedur perlu menentukan x_0 x_0 sebagai titik awal, kemudian menarik garis lurus ( misal garis: imath imath ) yang menyinggung titik f(x_0) f(x_0) . Hal ini berakibat garis imath imath memotong sumbu x x di titik x_1 x_1 . Ulangi langkah sebelumnya dengan x_1 x_1 sebagai titik awalnya. Setelah beberapa kali perulangan maka akan mendapatkan titik x_2, x_3, x_4, ... , x_n x_2, x_3, x_4, ... , x_n dengan x_n x_n adalah bilangan ril yang merupakan akar atau mendekati akar yang sebenarnya. Atau bisa digambarkan seperti dibawah ini . . . Dari gambar diatas, maka kita bisa menurunkan rumus metode newton-raphson, sebagai berikut: persamaan garis imath: y - y_0 = m(x-x_0) imath: y - y_0 = m(x-x_0) y - f(x_0) = f'(x_0)(x - x_0) y - f(x_0) = f'(x_0)(x - x_0) x_1 x_1 perpotongan garis imath imath dengan sumbu -x 0 - f(x_0) = f'(x_0)(x - x_0) 0 - f(x_0) = f'(x_0)(x - x_0) y = 0 y = 0 dan x = x_1 x = x_1 maka koordinat titik x_1, 0 x_1, 0 - \\frac{f(x_0)}{f'(x_0)} = (x_1 - x_0) - \\frac{f(x_0)}{f'(x_0)} = (x_1 - x_0) sehingga didapatkan formula sebagai berikut: x_1 = x_0 - \\frac{f(x_0)}{f'(x_0)} , x_2 = x_1 - \\frac{f(x_1)}{f'(x_1)}, ... , x_n = x_{n-1} - \\frac{f(x_{n-1})}{f'(x_{n-1})} x_1 = x_0 - \\frac{f(x_0)}{f'(x_0)} , x_2 = x_1 - \\frac{f(x_1)}{f'(x_1)}, ... , x_n = x_{n-1} - \\frac{f(x_{n-1})}{f'(x_{n-1})} . Algoritma \u00b6 Dari formula diatas, dapat disusun sebuah algoritma yang kemudian diimplementasikan menjadi sebuah program. Berikut adalah algoritma untuk menyusun akar - akar f(x) = 0 f(x) = 0 : Definisikan fungsi f f dengan f(x) f(x) dan f'(x) f'(x) . Tentukan epsilon sebagai toleransi kesalahan serta iterasi maksimum untuk Stopping Condition . Pilih tebakan awal x_0 x_0 . Hitung f(x_0) f(x_0) dan f'(x_0) f'(x_0) . Hitung x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 . Jika f'(x_0) = 0 f'(x_0) = 0 kembali ke langkah 3. Jika \\left | x_b - x_0 \\right | < \\varepsilon \\left | x_b - x_0 \\right | < \\varepsilon itersasi lebih dari iterasi maksimum tulis x_{hampiran} = x_b x_{hampiran} = x_b sebagai hasil hampiran akar. Jika tidak, lanjutkan ke langkah berikutnya. Ganti nilai x_0 x_0 dengan x_0 = x_b x_0 = x_b dan kembali ke langkah-4. Atau bisa juga menggunakan program python sebagai berikut. Program Python \u00b6 import math e = 2.71828 def fungsi ( x ): x = float (( e ** x ) - ( 4 * x )) return x def fungsiturunan ( x ): x = float (( e ** x ) - ( 4 )) return x x = float ( input ( 'Masukkan nilai awal = ' )) error = float ( input ( 'Masukkan nilai error = ' )) perulangan = int ( input ( 'Masukkan maksimal pengulangan = ' )) iterasi = 0 selisih = error + 1 while iterasi <= perulangan and selisih > error : iterasi += 1 f_2 = x - ( fungsi ( x ) / fungsiturunan ( x )) selisih = math . fabs ( f_2 - x ) x = f_2 print ( \" \\n iterasi ke = \" , iterasi , \" \\n x = \" , f_2 , \" \\n f(\" , f_2 , \") = \" , fungsi ( f_2 ), \" \\n selisih = \" , error ) if iterasi <= perulangan : print ( \"Perulangan Mencapai Batas Maksimal dengan hasil = \" , f_2 ) else : print ( \"Toleransi tidak terpenuhi\" ) . Keterangan : Import Library math (matematika). Karena kita menggunakan contoh fungsi f(x) = e^x - 4x f(x) = e^x - 4x maka kita membuat sebuah fungsi yang sesuai, dan juga fungsi turunannya yaitu f'(x) = e^x - 4 f'(x) = e^x - 4 . Membuat sebuah inputan untuk X , Error / Epsilon , serta Maksimal perulangan untuk stopping condition . Mendeklarasikan iterasi = 0 untuk perulangan yang ke-0 dan akan ditambah setiap kali perulangan. Mendeklarasikan selisih untuk x_b - x_0 x_b - x_0 untuk perbandingan. Melakukan perulangan dengan kondisi iterasi kurang dari sama dengan inputan maksimal iterasi dan selisih lebih dari error / epsilon Menghitung x_b x_b dengan rumus yang sudah didapatkan sebelumnya. Melakukan perbandingan jika mencapai nilai True maka toleransi tidak terpenuhi. Jika pengecekan selisih > error bernilai True maka toleransi akan terpenuhi dengan nilai error serta fungsi x pada iterasi ke-n. . . output hasil : Masukkan nilai awal = 0 Masukkan nilai error = 0.0001 Masukkan maksimal pengulangan = 20 iterasi ke = 1 x = 0.3333333333333333 f( 0.3333333333333333 ) = 0.06227877883196098 selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3333333333333333 iterasi ke = 2 x = 0.35724635301940616 f( 0.35724635301940616 ) = 0.0004022049593612742 selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35724635301940616 iterasi ke = 3 x = 0.35740281572145605 f( 0.35740281572145605 ) = 1.734656973617632e-08 selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35740281572145605 iterasi ke = 4 x = 0.3574028224700733 f( 0.3574028224700733 ) = -6.439293542825908e-15 selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3574028224700733","title":"2-Metode Newton-Raphson"},{"location":"2metode/#program-newton-raphson-pada-fungsi-persamaan-non-linear","text":"","title":"Program Newton Raphson pada Fungsi Persamaan Non Linear"},{"location":"2metode/#newton-raphson","text":"","title":"Newton-Raphson"},{"location":"2metode/#pengertian","text":"Newton-Raphson atau biasanya didefinisikan sebagai sebuah metode pencarian akar pada fungsi f(x) f(x) melalui pendekatan satu titik dengan fungsi f(x) f(x) yang memiliki turunan. Metode ini memakai pendekatan satu titik untuk titik awalnya. Oleh karena itu dianggap lebih mudah dari Bisection Method (Metode Bagi Dua). Convergen ke akar bisa semakin cepat dilakukan apabila titik awal yang dipilih dengan akar yang sebenarnya semakin dekat.","title":"Pengertian"},{"location":"2metode/#prosedur","text":"Untuk menentukan prosedur perlu menentukan x_0 x_0 sebagai titik awal, kemudian menarik garis lurus ( misal garis: imath imath ) yang menyinggung titik f(x_0) f(x_0) . Hal ini berakibat garis imath imath memotong sumbu x x di titik x_1 x_1 . Ulangi langkah sebelumnya dengan x_1 x_1 sebagai titik awalnya. Setelah beberapa kali perulangan maka akan mendapatkan titik x_2, x_3, x_4, ... , x_n x_2, x_3, x_4, ... , x_n dengan x_n x_n adalah bilangan ril yang merupakan akar atau mendekati akar yang sebenarnya. Atau bisa digambarkan seperti dibawah ini . . . Dari gambar diatas, maka kita bisa menurunkan rumus metode newton-raphson, sebagai berikut: persamaan garis imath: y - y_0 = m(x-x_0) imath: y - y_0 = m(x-x_0) y - f(x_0) = f'(x_0)(x - x_0) y - f(x_0) = f'(x_0)(x - x_0) x_1 x_1 perpotongan garis imath imath dengan sumbu -x 0 - f(x_0) = f'(x_0)(x - x_0) 0 - f(x_0) = f'(x_0)(x - x_0) y = 0 y = 0 dan x = x_1 x = x_1 maka koordinat titik x_1, 0 x_1, 0 - \\frac{f(x_0)}{f'(x_0)} = (x_1 - x_0) - \\frac{f(x_0)}{f'(x_0)} = (x_1 - x_0) sehingga didapatkan formula sebagai berikut: x_1 = x_0 - \\frac{f(x_0)}{f'(x_0)} , x_2 = x_1 - \\frac{f(x_1)}{f'(x_1)}, ... , x_n = x_{n-1} - \\frac{f(x_{n-1})}{f'(x_{n-1})} x_1 = x_0 - \\frac{f(x_0)}{f'(x_0)} , x_2 = x_1 - \\frac{f(x_1)}{f'(x_1)}, ... , x_n = x_{n-1} - \\frac{f(x_{n-1})}{f'(x_{n-1})} .","title":"Prosedur"},{"location":"2metode/#algoritma","text":"Dari formula diatas, dapat disusun sebuah algoritma yang kemudian diimplementasikan menjadi sebuah program. Berikut adalah algoritma untuk menyusun akar - akar f(x) = 0 f(x) = 0 : Definisikan fungsi f f dengan f(x) f(x) dan f'(x) f'(x) . Tentukan epsilon sebagai toleransi kesalahan serta iterasi maksimum untuk Stopping Condition . Pilih tebakan awal x_0 x_0 . Hitung f(x_0) f(x_0) dan f'(x_0) f'(x_0) . Hitung x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 . Jika f'(x_0) = 0 f'(x_0) = 0 kembali ke langkah 3. Jika \\left | x_b - x_0 \\right | < \\varepsilon \\left | x_b - x_0 \\right | < \\varepsilon itersasi lebih dari iterasi maksimum tulis x_{hampiran} = x_b x_{hampiran} = x_b sebagai hasil hampiran akar. Jika tidak, lanjutkan ke langkah berikutnya. Ganti nilai x_0 x_0 dengan x_0 = x_b x_0 = x_b dan kembali ke langkah-4. Atau bisa juga menggunakan program python sebagai berikut.","title":"Algoritma"},{"location":"2metode/#program-python","text":"import math e = 2.71828 def fungsi ( x ): x = float (( e ** x ) - ( 4 * x )) return x def fungsiturunan ( x ): x = float (( e ** x ) - ( 4 )) return x x = float ( input ( 'Masukkan nilai awal = ' )) error = float ( input ( 'Masukkan nilai error = ' )) perulangan = int ( input ( 'Masukkan maksimal pengulangan = ' )) iterasi = 0 selisih = error + 1 while iterasi <= perulangan and selisih > error : iterasi += 1 f_2 = x - ( fungsi ( x ) / fungsiturunan ( x )) selisih = math . fabs ( f_2 - x ) x = f_2 print ( \" \\n iterasi ke = \" , iterasi , \" \\n x = \" , f_2 , \" \\n f(\" , f_2 , \") = \" , fungsi ( f_2 ), \" \\n selisih = \" , error ) if iterasi <= perulangan : print ( \"Perulangan Mencapai Batas Maksimal dengan hasil = \" , f_2 ) else : print ( \"Toleransi tidak terpenuhi\" ) . Keterangan : Import Library math (matematika). Karena kita menggunakan contoh fungsi f(x) = e^x - 4x f(x) = e^x - 4x maka kita membuat sebuah fungsi yang sesuai, dan juga fungsi turunannya yaitu f'(x) = e^x - 4 f'(x) = e^x - 4 . Membuat sebuah inputan untuk X , Error / Epsilon , serta Maksimal perulangan untuk stopping condition . Mendeklarasikan iterasi = 0 untuk perulangan yang ke-0 dan akan ditambah setiap kali perulangan. Mendeklarasikan selisih untuk x_b - x_0 x_b - x_0 untuk perbandingan. Melakukan perulangan dengan kondisi iterasi kurang dari sama dengan inputan maksimal iterasi dan selisih lebih dari error / epsilon Menghitung x_b x_b dengan rumus yang sudah didapatkan sebelumnya. Melakukan perbandingan jika mencapai nilai True maka toleransi tidak terpenuhi. Jika pengecekan selisih > error bernilai True maka toleransi akan terpenuhi dengan nilai error serta fungsi x pada iterasi ke-n. . . output hasil : Masukkan nilai awal = 0 Masukkan nilai error = 0.0001 Masukkan maksimal pengulangan = 20 iterasi ke = 1 x = 0.3333333333333333 f( 0.3333333333333333 ) = 0.06227877883196098 selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3333333333333333 iterasi ke = 2 x = 0.35724635301940616 f( 0.35724635301940616 ) = 0.0004022049593612742 selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35724635301940616 iterasi ke = 3 x = 0.35740281572145605 f( 0.35740281572145605 ) = 1.734656973617632e-08 selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35740281572145605 iterasi ke = 4 x = 0.3574028224700733 f( 0.3574028224700733 ) = -6.439293542825908e-15 selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3574028224700733","title":"Program Python"}]}